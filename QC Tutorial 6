from collections import deque

class UglyFluorescentYellowFlamingo(QCAlgorithm):
    
    # strategy goals
    #   1) identify if SPY is in uptrend or downtrend
    #       - identify if SPY is above / below SMA
    #       - identify if SPY is above / below 50 MA
    #   2) if SPY is uptrending, close to 52 week high, go long
    #       - exit if SPY crosses 50 MA
    #   3) if SPY is downtrending, close to 52 week low, go short
    #       - exit if SPY corsses 50 MA
    #   4) all other times, don't have a position

    def Initialize(self):
        self.SetStartDate(2020, 1, 1)
        self.SetEndDate(2021, 1, 1)
        self.SetCash(100000)
        self.spy = self.AddEquity("SPY", Resolution.Daily).Symbol
        self.SetBenchmark("SPY")
        self.SetBrokerageModel(BrokerageName.InteractiveBrokersBrokerage, AccountType.Margin)
        
        # initialize custom simple moving average indicator
        self.sma = CustomSimpleMovingAverage("CustomSMA", 30)
        self.RegisterIndicator(self.spy, self.sma, Resolution.Daily)

    def OnData(self, data):
        
        # confirm that SMA is ready (takes 30 days of data collection)
        if not self.sma.IsReady:
            return
        # it is also possible to pump history requests into indicators so you don't have to wait ^ 
        
        # save high and low price for last year
        hist = self.History(self.spy, timedelta(365), Resolution.Daily)
        low = min(hist["low"])
        high = max(hist["high"])
        
        # save Spy's most recent price to the price variable by accessing the security array and indexing it with a price object
        price = self.Securities[self.spy].Price
        
        # check if Spy price is 5% above 52 week high and the SMA
        if price * 1.05 >= high and self.sma.Current.Value < price:
            if not self.Portfolio[self.spy].IsLong:
                self.SetHoldings(self.spy, 1)
                
        # now do same thing for going short 
        elif price * 0.95 <= low and self.sma.Current.Value > price:  
            if not self.Portfolio[self.spy].IsShort:
                self.SetHoldings(self.spy, -1)
                
        else:
            self.Liquidate()
            
        # plot a few things to visually understand what's happening
        # these three lines make a chart with all the below in one place
        self.Plot("Benchmark", "52w-High", high)
        self.Plot("Benchmark", "52w-Low", low)
        self.Plot("Benchmark", "SMA", self.sma.Current.Value)
        
class CustomSimpleMovingAverage(PythonIndicator):
    
    def __init__(self, name, period):
        self.Name = name
        self.Time = datetime.min
        self.Value = 0
        self.queue = deque(maxlen=period)

    def Update(self, input):
        self.queue.appendleft(input.Close)
        self.Time = input.EndTime
        count = len(self.queue)
        self.Value = sum(self.queue) / count
        return (count == self.queue.maxlen)
   
