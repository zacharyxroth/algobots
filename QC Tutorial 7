class SquareAsparagusPenguin(QCAlgorithm):

    def Initialize(self):
        self.SetStartDate(2020, 1, 1)
        self.SetEndDate (2021, 1, 1)
        self.SetCash(100000) 
        self.symbol = self.AddEquity("SPY", Resolution.Minute).Symbol
        self.rollingWindow = RollingWindow[TradeBar](2) # holds 2 elements
        self.Consolidate(self.symbol, Resolution.Daily, self.CustomBarHandler)
        # consolidates minute resolution to daily
        
        self.Schedule.On(self.DateRules.EveryDay(self.symbol),
                        self.TimeRules.BeforeMarketClose(self.symbol, 15), # 15 min before close
                        self.ExitPositions) 

    def OnData(self, data):
        if not self.rollingWindow.IsReady:
            return
        
        if not (self.Time.hour == 9 and self.Time.minute == 31):
            return
    # don't make any trades at any other time
    
    # trade logic below 
    # compares open price at 9:31 to close price of previous day
        if data[self.symbol].Open >= 1.01 * self.rollingWindow[0].Close:
            self.SetHoldings(self.symbol, -1) # indicates short SPY if gap up over 1%
        elif data[self.symbol].Open <= 0.99 * self.rollingWindow[0].Close:
            self.SetHoldings(self.symbol, 1)

    
    def CustomBarHandler(self, bar):
        self.rollingWindow.Add(bar) 
        
    def ExitPositions(self):
        self.Liquidate(self.symbol)
